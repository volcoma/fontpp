#pragma once
#include <cstdint>
#include <array>
namespace fnt
{
constexpr int CAPS_LEN = 666;

using lv_t = std::pair<uint32_t, uint32_t>;
using lut_t = std::array<lv_t, CAPS_LEN>;
constexpr static const lut_t caps_table = {{
	lv_t{0x0061, 0x0041},
	lv_t{0x0062, 0x0042},
	lv_t{0x0063, 0x0043},
	lv_t{0x0064, 0x0044},
	lv_t{0x0065, 0x0045},
	lv_t{0x0066, 0x0046},
	lv_t{0x0067, 0x0047},
	lv_t{0x0068, 0x0048},
	lv_t{0x0069, 0x0049},
	lv_t{0x006A, 0x004A},
	lv_t{0x006B, 0x004B},
	lv_t{0x006C, 0x004C},
	lv_t{0x006D, 0x004D},
	lv_t{0x006E, 0x004E},
	lv_t{0x006F, 0x004F},
	lv_t{0x0070, 0x0050},
	lv_t{0x0071, 0x0051},
	lv_t{0x0072, 0x0052},
	lv_t{0x0073, 0x0053},
	lv_t{0x0074, 0x0054},
	lv_t{0x0075, 0x0055},
	lv_t{0x0076, 0x0056},
	lv_t{0x0077, 0x0057},
	lv_t{0x0078, 0x0058},
	lv_t{0x0079, 0x0059},
	lv_t{0x007A, 0x005A},
	lv_t{0x00E0, 0x00C0},
	lv_t{0x00E1, 0x00C1},
	lv_t{0x00E2, 0x00C2},
	lv_t{0x00E3, 0x00C3},
	lv_t{0x00E4, 0x00C4},
	lv_t{0x00E5, 0x00C5},
	lv_t{0x00E6, 0x00C6},
	lv_t{0x00E7, 0x00C7},
	lv_t{0x00E8, 0x00C8},
	lv_t{0x00E9, 0x00C9},
	lv_t{0x00EA, 0x00CA},
	lv_t{0x00EB, 0x00CB},
	lv_t{0x00EC, 0x00CC},
	lv_t{0x00ED, 0x00CD},
	lv_t{0x00EE, 0x00CE},
	lv_t{0x00EF, 0x00CF},
	lv_t{0x00F0, 0x00D0},
	lv_t{0x00F1, 0x00D1},
	lv_t{0x00F2, 0x00D2},
	lv_t{0x00F3, 0x00D3},
	lv_t{0x00F4, 0x00D4},
	lv_t{0x00F5, 0x00D5},
	lv_t{0x00F6, 0x00D6},
	lv_t{0x00F8, 0x00D8},
	lv_t{0x00F9, 0x00D9},
	lv_t{0x00FA, 0x00DA},
	lv_t{0x00FB, 0x00DB},
	lv_t{0x00FC, 0x00DC},
	lv_t{0x00FD, 0x00DD},
	lv_t{0x00FE, 0x00DE},
	lv_t{0x00FF, 0x0178},
	lv_t{0x0101, 0x0100},
	lv_t{0x0103, 0x0102},
	lv_t{0x0105, 0x0104},
	lv_t{0x0107, 0x0106},
	lv_t{0x0109, 0x0108},
	lv_t{0x010B, 0x010A},
	lv_t{0x010D, 0x010C},
	lv_t{0x010F, 0x010E},
	lv_t{0x0111, 0x0110},
	lv_t{0x0113, 0x0112},
	lv_t{0x0115, 0x0114},
	lv_t{0x0117, 0x0116},
	lv_t{0x0119, 0x0118},
	lv_t{0x011B, 0x011A},
	lv_t{0x011D, 0x011C},
	lv_t{0x011F, 0x011E},
	lv_t{0x0121, 0x0120},
	lv_t{0x0123, 0x0122},
	lv_t{0x0125, 0x0124},
	lv_t{0x0127, 0x0126},
	lv_t{0x0129, 0x0128},
	lv_t{0x012B, 0x012A},
	lv_t{0x012D, 0x012C},
	lv_t{0x012F, 0x012E},
	lv_t{0x0131, 0x0049},
	lv_t{0x0133, 0x0132},
	lv_t{0x0135, 0x0134},
	lv_t{0x0137, 0x0136},
	lv_t{0x013A, 0x0139},
	lv_t{0x013C, 0x013B},
	lv_t{0x013E, 0x013D},
	lv_t{0x0140, 0x013F},
	lv_t{0x0142, 0x0141},
	lv_t{0x0144, 0x0143},
	lv_t{0x0146, 0x0145},
	lv_t{0x0148, 0x0147},
	lv_t{0x014B, 0x014A},
	lv_t{0x014D, 0x014C},
	lv_t{0x014F, 0x014E},
	lv_t{0x0151, 0x0150},
	lv_t{0x0153, 0x0152},
	lv_t{0x0155, 0x0154},
	lv_t{0x0157, 0x0156},
	lv_t{0x0159, 0x0158},
	lv_t{0x015B, 0x015A},
	lv_t{0x015D, 0x015C},
	lv_t{0x015F, 0x015E},
	lv_t{0x0161, 0x0160},
	lv_t{0x0163, 0x0162},
	lv_t{0x0165, 0x0164},
	lv_t{0x0167, 0x0166},
	lv_t{0x0169, 0x0168},
	lv_t{0x016B, 0x016A},
	lv_t{0x016D, 0x016C},
	lv_t{0x016F, 0x016E},
	lv_t{0x0171, 0x0170},
	lv_t{0x0173, 0x0172},
	lv_t{0x0175, 0x0174},
	lv_t{0x0177, 0x0176},
	lv_t{0x017A, 0x0179},
	lv_t{0x017C, 0x017B},
	lv_t{0x017E, 0x017D},
	lv_t{0x0183, 0x0182},
	lv_t{0x0185, 0x0184},
	lv_t{0x0188, 0x0187},
	lv_t{0x018C, 0x018B},
	lv_t{0x0192, 0x0191},
	lv_t{0x0199, 0x0198},
	lv_t{0x01A1, 0x01A0},
	lv_t{0x01A3, 0x01A2},
	lv_t{0x01A5, 0x01A4},
	lv_t{0x01A8, 0x01A7},
	lv_t{0x01AD, 0x01AC},
	lv_t{0x01B0, 0x01AF},
	lv_t{0x01B4, 0x01B3},
	lv_t{0x01B6, 0x01B5},
	lv_t{0x01B9, 0x01B8},
	lv_t{0x01BD, 0x01BC},
	lv_t{0x01C6, 0x01C4},
	lv_t{0x01C9, 0x01C7},
	lv_t{0x01CC, 0x01CA},
	lv_t{0x01CE, 0x01CD},
	lv_t{0x01D0, 0x01CF},
	lv_t{0x01D2, 0x01D1},
	lv_t{0x01D4, 0x01D3},
	lv_t{0x01D6, 0x01D5},
	lv_t{0x01D8, 0x01D7},
	lv_t{0x01DA, 0x01D9},
	lv_t{0x01DC, 0x01DB},
	lv_t{0x01DF, 0x01DE},
	lv_t{0x01E1, 0x01E0},
	lv_t{0x01E3, 0x01E2},
	lv_t{0x01E5, 0x01E4},
	lv_t{0x01E7, 0x01E6},
	lv_t{0x01E9, 0x01E8},
	lv_t{0x01EB, 0x01EA},
	lv_t{0x01ED, 0x01EC},
	lv_t{0x01EF, 0x01EE},
	lv_t{0x01F3, 0x01F1},
	lv_t{0x01F5, 0x01F4},
	lv_t{0x01FB, 0x01FA},
	lv_t{0x01FD, 0x01FC},
	lv_t{0x01FF, 0x01FE},
	lv_t{0x0201, 0x0200},
	lv_t{0x0203, 0x0202},
	lv_t{0x0205, 0x0204},
	lv_t{0x0207, 0x0206},
	lv_t{0x0209, 0x0208},
	lv_t{0x020B, 0x020A},
	lv_t{0x020D, 0x020C},
	lv_t{0x020F, 0x020E},
	lv_t{0x0211, 0x0210},
	lv_t{0x0213, 0x0212},
	lv_t{0x0215, 0x0214},
	lv_t{0x0217, 0x0216},
	lv_t{0x0253, 0x0181},
	lv_t{0x0254, 0x0186},
	lv_t{0x0257, 0x018A},
	lv_t{0x0258, 0x018E},
	lv_t{0x0259, 0x018F},
	lv_t{0x025B, 0x0190},
	lv_t{0x0260, 0x0193},
	lv_t{0x0263, 0x0194},
	lv_t{0x0268, 0x0197},
	lv_t{0x0269, 0x0196},
	lv_t{0x026F, 0x019C},
	lv_t{0x0272, 0x019D},
	lv_t{0x0275, 0x019F},
	lv_t{0x0283, 0x01A9},
	lv_t{0x0288, 0x01AE},
	lv_t{0x028A, 0x01B1},
	lv_t{0x028B, 0x01B2},
	lv_t{0x0292, 0x01B7},
	lv_t{0x03AC, 0x0386},
	lv_t{0x03AD, 0x0388},
	lv_t{0x03AE, 0x0389},
	lv_t{0x03AF, 0x038A},
	lv_t{0x03B1, 0x0391},
	lv_t{0x03B2, 0x0392},
	lv_t{0x03B3, 0x0393},
	lv_t{0x03B4, 0x0394},
	lv_t{0x03B5, 0x0395},
	lv_t{0x03B6, 0x0396},
	lv_t{0x03B7, 0x0397},
	lv_t{0x03B8, 0x0398},
	lv_t{0x03B9, 0x0399},
	lv_t{0x03BA, 0x039A},
	lv_t{0x03BB, 0x039B},
	lv_t{0x03BC, 0x039C},
	lv_t{0x03BD, 0x039D},
	lv_t{0x03BE, 0x039E},
	lv_t{0x03BF, 0x039F},
	lv_t{0x03C0, 0x03A0},
	lv_t{0x03C1, 0x03A1},
	lv_t{0x03C3, 0x03A3},
	lv_t{0x03C4, 0x03A4},
	lv_t{0x03C5, 0x03A5},
	lv_t{0x03C6, 0x03A6},
	lv_t{0x03C7, 0x03A7},
	lv_t{0x03C8, 0x03A8},
	lv_t{0x03C9, 0x03A9},
	lv_t{0x03CA, 0x03AA},
	lv_t{0x03CB, 0x03AB},
	lv_t{0x03CC, 0x038C},
	lv_t{0x03CD, 0x038E},
	lv_t{0x03CE, 0x038F},
	lv_t{0x03E3, 0x03E2},
	lv_t{0x03E5, 0x03E4},
	lv_t{0x03E7, 0x03E6},
	lv_t{0x03E9, 0x03E8},
	lv_t{0x03EB, 0x03EA},
	lv_t{0x03ED, 0x03EC},
	lv_t{0x03EF, 0x03EE},
	lv_t{0x0430, 0x0410},
	lv_t{0x0431, 0x0411},
	lv_t{0x0432, 0x0412},
	lv_t{0x0433, 0x0413},
	lv_t{0x0434, 0x0414},
	lv_t{0x0435, 0x0415},
	lv_t{0x0436, 0x0416},
	lv_t{0x0437, 0x0417},
	lv_t{0x0438, 0x0418},
	lv_t{0x0439, 0x0419},
	lv_t{0x043A, 0x041A},
	lv_t{0x043B, 0x041B},
	lv_t{0x043C, 0x041C},
	lv_t{0x043D, 0x041D},
	lv_t{0x043E, 0x041E},
	lv_t{0x043F, 0x041F},
	lv_t{0x0440, 0x0420},
	lv_t{0x0441, 0x0421},
	lv_t{0x0442, 0x0422},
	lv_t{0x0443, 0x0423},
	lv_t{0x0444, 0x0424},
	lv_t{0x0445, 0x0425},
	lv_t{0x0446, 0x0426},
	lv_t{0x0447, 0x0427},
	lv_t{0x0448, 0x0428},
	lv_t{0x0449, 0x0429},
	lv_t{0x044A, 0x042A},
	lv_t{0x044B, 0x042B},
	lv_t{0x044C, 0x042C},
	lv_t{0x044D, 0x042D},
	lv_t{0x044E, 0x042E},
	lv_t{0x044F, 0x042F},
	lv_t{0x0451, 0x0401},
	lv_t{0x0452, 0x0402},
	lv_t{0x0453, 0x0403},
	lv_t{0x0454, 0x0404},
	lv_t{0x0455, 0x0405},
	lv_t{0x0456, 0x0406},
	lv_t{0x0457, 0x0407},
	lv_t{0x0458, 0x0408},
	lv_t{0x0459, 0x0409},
	lv_t{0x045A, 0x040A},
	lv_t{0x045B, 0x040B},
	lv_t{0x045C, 0x040C},
	lv_t{0x045E, 0x040E},
	lv_t{0x045F, 0x040F},
	lv_t{0x0461, 0x0460},
	lv_t{0x0463, 0x0462},
	lv_t{0x0465, 0x0464},
	lv_t{0x0467, 0x0466},
	lv_t{0x0469, 0x0468},
	lv_t{0x046B, 0x046A},
	lv_t{0x046D, 0x046C},
	lv_t{0x046F, 0x046E},
	lv_t{0x0471, 0x0470},
	lv_t{0x0473, 0x0472},
	lv_t{0x0475, 0x0474},
	lv_t{0x0477, 0x0476},
	lv_t{0x0479, 0x0478},
	lv_t{0x047B, 0x047A},
	lv_t{0x047D, 0x047C},
	lv_t{0x047F, 0x047E},
	lv_t{0x0481, 0x0480},
	lv_t{0x0491, 0x0490},
	lv_t{0x0493, 0x0492},
	lv_t{0x0495, 0x0494},
	lv_t{0x0497, 0x0496},
	lv_t{0x0499, 0x0498},
	lv_t{0x049B, 0x049A},
	lv_t{0x049D, 0x049C},
	lv_t{0x049F, 0x049E},
	lv_t{0x04A1, 0x04A0},
	lv_t{0x04A3, 0x04A2},
	lv_t{0x04A5, 0x04A4},
	lv_t{0x04A7, 0x04A6},
	lv_t{0x04A9, 0x04A8},
	lv_t{0x04AB, 0x04AA},
	lv_t{0x04AD, 0x04AC},
	lv_t{0x04AF, 0x04AE},
	lv_t{0x04B1, 0x04B0},
	lv_t{0x04B3, 0x04B2},
	lv_t{0x04B5, 0x04B4},
	lv_t{0x04B7, 0x04B6},
	lv_t{0x04B9, 0x04B8},
	lv_t{0x04BB, 0x04BA},
	lv_t{0x04BD, 0x04BC},
	lv_t{0x04BF, 0x04BE},
	lv_t{0x04C2, 0x04C1},
	lv_t{0x04C4, 0x04C3},
	lv_t{0x04C8, 0x04C7},
	lv_t{0x04CC, 0x04CB},
	lv_t{0x04D1, 0x04D0},
	lv_t{0x04D3, 0x04D2},
	lv_t{0x04D5, 0x04D4},
	lv_t{0x04D7, 0x04D6},
	lv_t{0x04D9, 0x04D8},
	lv_t{0x04DB, 0x04DA},
	lv_t{0x04DD, 0x04DC},
	lv_t{0x04DF, 0x04DE},
	lv_t{0x04E1, 0x04E0},
	lv_t{0x04E3, 0x04E2},
	lv_t{0x04E5, 0x04E4},
	lv_t{0x04E7, 0x04E6},
	lv_t{0x04E9, 0x04E8},
	lv_t{0x04EB, 0x04EA},
	lv_t{0x04EF, 0x04EE},
	lv_t{0x04F1, 0x04F0},
	lv_t{0x04F3, 0x04F2},
	lv_t{0x04F5, 0x04F4},
	lv_t{0x04F9, 0x04F8},
	lv_t{0x0561, 0x0531},
	lv_t{0x0562, 0x0532},
	lv_t{0x0563, 0x0533},
	lv_t{0x0564, 0x0534},
	lv_t{0x0565, 0x0535},
	lv_t{0x0566, 0x0536},
	lv_t{0x0567, 0x0537},
	lv_t{0x0568, 0x0538},
	lv_t{0x0569, 0x0539},
	lv_t{0x056A, 0x053A},
	lv_t{0x056B, 0x053B},
	lv_t{0x056C, 0x053C},
	lv_t{0x056D, 0x053D},
	lv_t{0x056E, 0x053E},
	lv_t{0x056F, 0x053F},
	lv_t{0x0570, 0x0540},
	lv_t{0x0571, 0x0541},
	lv_t{0x0572, 0x0542},
	lv_t{0x0573, 0x0543},
	lv_t{0x0574, 0x0544},
	lv_t{0x0575, 0x0545},
	lv_t{0x0576, 0x0546},
	lv_t{0x0577, 0x0547},
	lv_t{0x0578, 0x0548},
	lv_t{0x0579, 0x0549},
	lv_t{0x057A, 0x054A},
	lv_t{0x057B, 0x054B},
	lv_t{0x057C, 0x054C},
	lv_t{0x057D, 0x054D},
	lv_t{0x057E, 0x054E},
	lv_t{0x057F, 0x054F},
	lv_t{0x0580, 0x0550},
	lv_t{0x0581, 0x0551},
	lv_t{0x0582, 0x0552},
	lv_t{0x0583, 0x0553},
	lv_t{0x0584, 0x0554},
	lv_t{0x0585, 0x0555},
	lv_t{0x0586, 0x0556},
	lv_t{0x10D0, 0x10A0},
	lv_t{0x10D1, 0x10A1},
	lv_t{0x10D2, 0x10A2},
	lv_t{0x10D3, 0x10A3},
	lv_t{0x10D4, 0x10A4},
	lv_t{0x10D5, 0x10A5},
	lv_t{0x10D6, 0x10A6},
	lv_t{0x10D7, 0x10A7},
	lv_t{0x10D8, 0x10A8},
	lv_t{0x10D9, 0x10A9},
	lv_t{0x10DA, 0x10AA},
	lv_t{0x10DB, 0x10AB},
	lv_t{0x10DC, 0x10AC},
	lv_t{0x10DD, 0x10AD},
	lv_t{0x10DE, 0x10AE},
	lv_t{0x10DF, 0x10AF},
	lv_t{0x10E0, 0x10B0},
	lv_t{0x10E1, 0x10B1},
	lv_t{0x10E2, 0x10B2},
	lv_t{0x10E3, 0x10B3},
	lv_t{0x10E4, 0x10B4},
	lv_t{0x10E5, 0x10B5},
	lv_t{0x10E6, 0x10B6},
	lv_t{0x10E7, 0x10B7},
	lv_t{0x10E8, 0x10B8},
	lv_t{0x10E9, 0x10B9},
	lv_t{0x10EA, 0x10BA},
	lv_t{0x10EB, 0x10BB},
	lv_t{0x10EC, 0x10BC},
	lv_t{0x10ED, 0x10BD},
	lv_t{0x10EE, 0x10BE},
	lv_t{0x10EF, 0x10BF},
	lv_t{0x10F0, 0x10C0},
	lv_t{0x10F1, 0x10C1},
	lv_t{0x10F2, 0x10C2},
	lv_t{0x10F3, 0x10C3},
	lv_t{0x10F4, 0x10C4},
	lv_t{0x10F5, 0x10C5},
	lv_t{0x1E01, 0x1E00},
	lv_t{0x1E03, 0x1E02},
	lv_t{0x1E05, 0x1E04},
	lv_t{0x1E07, 0x1E06},
	lv_t{0x1E09, 0x1E08},
	lv_t{0x1E0B, 0x1E0A},
	lv_t{0x1E0D, 0x1E0C},
	lv_t{0x1E0F, 0x1E0E},
	lv_t{0x1E11, 0x1E10},
	lv_t{0x1E13, 0x1E12},
	lv_t{0x1E15, 0x1E14},
	lv_t{0x1E17, 0x1E16},
	lv_t{0x1E19, 0x1E18},
	lv_t{0x1E1B, 0x1E1A},
	lv_t{0x1E1D, 0x1E1C},
	lv_t{0x1E1F, 0x1E1E},
	lv_t{0x1E21, 0x1E20},
	lv_t{0x1E23, 0x1E22},
	lv_t{0x1E25, 0x1E24},
	lv_t{0x1E27, 0x1E26},
	lv_t{0x1E29, 0x1E28},
	lv_t{0x1E2B, 0x1E2A},
	lv_t{0x1E2D, 0x1E2C},
	lv_t{0x1E2F, 0x1E2E},
	lv_t{0x1E31, 0x1E30},
	lv_t{0x1E33, 0x1E32},
	lv_t{0x1E35, 0x1E34},
	lv_t{0x1E37, 0x1E36},
	lv_t{0x1E39, 0x1E38},
	lv_t{0x1E3B, 0x1E3A},
	lv_t{0x1E3D, 0x1E3C},
	lv_t{0x1E3F, 0x1E3E},
	lv_t{0x1E41, 0x1E40},
	lv_t{0x1E43, 0x1E42},
	lv_t{0x1E45, 0x1E44},
	lv_t{0x1E47, 0x1E46},
	lv_t{0x1E49, 0x1E48},
	lv_t{0x1E4B, 0x1E4A},
	lv_t{0x1E4D, 0x1E4C},
	lv_t{0x1E4F, 0x1E4E},
	lv_t{0x1E51, 0x1E50},
	lv_t{0x1E53, 0x1E52},
	lv_t{0x1E55, 0x1E54},
	lv_t{0x1E57, 0x1E56},
	lv_t{0x1E59, 0x1E58},
	lv_t{0x1E5B, 0x1E5A},
	lv_t{0x1E5D, 0x1E5C},
	lv_t{0x1E5F, 0x1E5E},
	lv_t{0x1E61, 0x1E60},
	lv_t{0x1E63, 0x1E62},
	lv_t{0x1E65, 0x1E64},
	lv_t{0x1E67, 0x1E66},
	lv_t{0x1E69, 0x1E68},
	lv_t{0x1E6B, 0x1E6A},
	lv_t{0x1E6D, 0x1E6C},
	lv_t{0x1E6F, 0x1E6E},
	lv_t{0x1E71, 0x1E70},
	lv_t{0x1E73, 0x1E72},
	lv_t{0x1E75, 0x1E74},
	lv_t{0x1E77, 0x1E76},
	lv_t{0x1E79, 0x1E78},
	lv_t{0x1E7B, 0x1E7A},
	lv_t{0x1E7D, 0x1E7C},
	lv_t{0x1E7F, 0x1E7E},
	lv_t{0x1E81, 0x1E80},
	lv_t{0x1E83, 0x1E82},
	lv_t{0x1E85, 0x1E84},
	lv_t{0x1E87, 0x1E86},
	lv_t{0x1E89, 0x1E88},
	lv_t{0x1E8B, 0x1E8A},
	lv_t{0x1E8D, 0x1E8C},
	lv_t{0x1E8F, 0x1E8E},
	lv_t{0x1E91, 0x1E90},
	lv_t{0x1E93, 0x1E92},
	lv_t{0x1E95, 0x1E94},
	lv_t{0x1EA1, 0x1EA0},
	lv_t{0x1EA3, 0x1EA2},
	lv_t{0x1EA5, 0x1EA4},
	lv_t{0x1EA7, 0x1EA6},
	lv_t{0x1EA9, 0x1EA8},
	lv_t{0x1EAB, 0x1EAA},
	lv_t{0x1EAD, 0x1EAC},
	lv_t{0x1EAF, 0x1EAE},
	lv_t{0x1EB1, 0x1EB0},
	lv_t{0x1EB3, 0x1EB2},
	lv_t{0x1EB5, 0x1EB4},
	lv_t{0x1EB7, 0x1EB6},
	lv_t{0x1EB9, 0x1EB8},
	lv_t{0x1EBB, 0x1EBA},
	lv_t{0x1EBD, 0x1EBC},
	lv_t{0x1EBF, 0x1EBE},
	lv_t{0x1EC1, 0x1EC0},
	lv_t{0x1EC3, 0x1EC2},
	lv_t{0x1EC5, 0x1EC4},
	lv_t{0x1EC7, 0x1EC6},
	lv_t{0x1EC9, 0x1EC8},
	lv_t{0x1ECB, 0x1ECA},
	lv_t{0x1ECD, 0x1ECC},
	lv_t{0x1ECF, 0x1ECE},
	lv_t{0x1ED1, 0x1ED0},
	lv_t{0x1ED3, 0x1ED2},
	lv_t{0x1ED5, 0x1ED4},
	lv_t{0x1ED7, 0x1ED6},
	lv_t{0x1ED9, 0x1ED8},
	lv_t{0x1EDB, 0x1EDA},
	lv_t{0x1EDD, 0x1EDC},
	lv_t{0x1EDF, 0x1EDE},
	lv_t{0x1EE1, 0x1EE0},
	lv_t{0x1EE3, 0x1EE2},
	lv_t{0x1EE5, 0x1EE4},
	lv_t{0x1EE7, 0x1EE6},
	lv_t{0x1EE9, 0x1EE8},
	lv_t{0x1EEB, 0x1EEA},
	lv_t{0x1EED, 0x1EEC},
	lv_t{0x1EEF, 0x1EEE},
	lv_t{0x1EF1, 0x1EF0},
	lv_t{0x1EF3, 0x1EF2},
	lv_t{0x1EF5, 0x1EF4},
	lv_t{0x1EF7, 0x1EF6},
	lv_t{0x1EF9, 0x1EF8},
	lv_t{0x1F00, 0x1F08},
	lv_t{0x1F01, 0x1F09},
	lv_t{0x1F02, 0x1F0A},
	lv_t{0x1F03, 0x1F0B},
	lv_t{0x1F04, 0x1F0C},
	lv_t{0x1F05, 0x1F0D},
	lv_t{0x1F06, 0x1F0E},
	lv_t{0x1F07, 0x1F0F},
	lv_t{0x1F10, 0x1F18},
	lv_t{0x1F11, 0x1F19},
	lv_t{0x1F12, 0x1F1A},
	lv_t{0x1F13, 0x1F1B},
	lv_t{0x1F14, 0x1F1C},
	lv_t{0x1F15, 0x1F1D},
	lv_t{0x1F20, 0x1F28},
	lv_t{0x1F21, 0x1F29},
	lv_t{0x1F22, 0x1F2A},
	lv_t{0x1F23, 0x1F2B},
	lv_t{0x1F24, 0x1F2C},
	lv_t{0x1F25, 0x1F2D},
	lv_t{0x1F26, 0x1F2E},
	lv_t{0x1F27, 0x1F2F},
	lv_t{0x1F30, 0x1F38},
	lv_t{0x1F31, 0x1F39},
	lv_t{0x1F32, 0x1F3A},
	lv_t{0x1F33, 0x1F3B},
	lv_t{0x1F34, 0x1F3C},
	lv_t{0x1F35, 0x1F3D},
	lv_t{0x1F36, 0x1F3E},
	lv_t{0x1F37, 0x1F3F},
	lv_t{0x1F40, 0x1F48},
	lv_t{0x1F41, 0x1F49},
	lv_t{0x1F42, 0x1F4A},
	lv_t{0x1F43, 0x1F4B},
	lv_t{0x1F44, 0x1F4C},
	lv_t{0x1F45, 0x1F4D},
	lv_t{0x1F51, 0x1F59},
	lv_t{0x1F53, 0x1F5B},
	lv_t{0x1F55, 0x1F5D},
	lv_t{0x1F57, 0x1F5F},
	lv_t{0x1F60, 0x1F68},
	lv_t{0x1F61, 0x1F69},
	lv_t{0x1F62, 0x1F6A},
	lv_t{0x1F63, 0x1F6B},
	lv_t{0x1F64, 0x1F6C},
	lv_t{0x1F65, 0x1F6D},
	lv_t{0x1F66, 0x1F6E},
	lv_t{0x1F67, 0x1F6F},
	lv_t{0x1F80, 0x1F88},
	lv_t{0x1F81, 0x1F89},
	lv_t{0x1F82, 0x1F8A},
	lv_t{0x1F83, 0x1F8B},
	lv_t{0x1F84, 0x1F8C},
	lv_t{0x1F85, 0x1F8D},
	lv_t{0x1F86, 0x1F8E},
	lv_t{0x1F87, 0x1F8F},
	lv_t{0x1F90, 0x1F98},
	lv_t{0x1F91, 0x1F99},
	lv_t{0x1F92, 0x1F9A},
	lv_t{0x1F93, 0x1F9B},
	lv_t{0x1F94, 0x1F9C},
	lv_t{0x1F95, 0x1F9D},
	lv_t{0x1F96, 0x1F9E},
	lv_t{0x1F97, 0x1F9F},
	lv_t{0x1FA0, 0x1FA8},
	lv_t{0x1FA1, 0x1FA9},
	lv_t{0x1FA2, 0x1FAA},
	lv_t{0x1FA3, 0x1FAB},
	lv_t{0x1FA4, 0x1FAC},
	lv_t{0x1FA5, 0x1FAD},
	lv_t{0x1FA6, 0x1FAE},
	lv_t{0x1FA7, 0x1FAF},
	lv_t{0x1FB0, 0x1FB8},
	lv_t{0x1FB1, 0x1FB9},
	lv_t{0x1FD0, 0x1FD8},
	lv_t{0x1FD1, 0x1FD9},
	lv_t{0x1FE0, 0x1FE8},
	lv_t{0x1FE1, 0x1FE9},
	lv_t{0x24D0, 0x24B6},
	lv_t{0x24D1, 0x24B7},
	lv_t{0x24D2, 0x24B8},
	lv_t{0x24D3, 0x24B9},
	lv_t{0x24D4, 0x24BA},
	lv_t{0x24D5, 0x24BB},
	lv_t{0x24D6, 0x24BC},
	lv_t{0x24D7, 0x24BD},
	lv_t{0x24D8, 0x24BE},
	lv_t{0x24D9, 0x24BF},
	lv_t{0x24DA, 0x24C0},
	lv_t{0x24DB, 0x24C1},
	lv_t{0x24DC, 0x24C2},
	lv_t{0x24DD, 0x24C3},
	lv_t{0x24DE, 0x24C4},
	lv_t{0x24DF, 0x24C5},
	lv_t{0x24E0, 0x24C6},
	lv_t{0x24E1, 0x24C7},
	lv_t{0x24E2, 0x24C8},
	lv_t{0x24E3, 0x24C9},
	lv_t{0x24E4, 0x24CA},
	lv_t{0x24E5, 0x24CB},
	lv_t{0x24E6, 0x24CC},
	lv_t{0x24E7, 0x24CD},
	lv_t{0x24E8, 0x24CE},
	lv_t{0x24E9, 0x24CF},
	lv_t{0xFF41, 0xFF21},
	lv_t{0xFF42, 0xFF22},
	lv_t{0xFF43, 0xFF23},
	lv_t{0xFF44, 0xFF24},
	lv_t{0xFF45, 0xFF25},
	lv_t{0xFF46, 0xFF26},
	lv_t{0xFF47, 0xFF27},
	lv_t{0xFF48, 0xFF28},
	lv_t{0xFF49, 0xFF29},
	lv_t{0xFF4A, 0xFF2A},
	lv_t{0xFF4B, 0xFF2B},
	lv_t{0xFF4C, 0xFF2C},
	lv_t{0xFF4D, 0xFF2D},
	lv_t{0xFF4E, 0xFF2E},
	lv_t{0xFF4F, 0xFF2F},
	lv_t{0xFF50, 0xFF30},
	lv_t{0xFF51, 0xFF31},
	lv_t{0xFF52, 0xFF32},
	lv_t{0xFF53, 0xFF33},
	lv_t{0xFF54, 0xFF34},
	lv_t{0xFF55, 0xFF35},
	lv_t{0xFF56, 0xFF36},
	lv_t{0xFF57, 0xFF37},
	lv_t{0xFF58, 0xFF38},
	lv_t{0xFF59, 0xFF39},
	lv_t{0xFF5A, 0xFF3A},
}};

template<typename T, size_t N>
struct case_table
{
    constexpr size_t size() const
    {
        return N;
    }

	constexpr case_table(const lut_t& ctable, bool swap_data)
    {
        for(size_t i = 0; i < ctable.size(); ++i)
        {
            const auto& pair = ctable[i];
            auto v1 = pair.first;
            auto v2 = pair.second;

            if(swap_data)
            {
                auto tmp = v1;
                v1 = v2;
                v2 = tmp;
            }
            if(values[v1] == 0)
            {
                values[v1] = v2;
            }
        }
    }
    T values[N] {};
};

using case_table_t = case_table<uint32_t, 0xFFFF>;

constexpr static const case_table_t uppertable(caps_table, false);
constexpr inline uint32_t find_upper_indexed(uint32_t ch)
{
    if(ch < uppertable.size())
    {
        auto indexed = uppertable.values[ch];
        if(indexed != 0)
        {
            return indexed;
        }
    }

    return ch;
}

constexpr static const case_table_t lowertable(caps_table, true);
constexpr inline uint32_t find_lower_indexed(uint32_t ch)
{
    if(ch < lowertable.size())
    {
        auto indexed = lowertable.values[ch];
        if(indexed != 0)
        {
            return indexed;
        }
    }

    return ch;
}

inline uint32_t find_lower_case(uint32_t ch)
{
    return find_lower_indexed(ch);
}

inline uint32_t find_upper_case(uint32_t ch)
{
    return find_upper_indexed(ch);
}

inline bool to_upper_case(uint32_t& input)
{
    auto output = find_upper_case(input);
    if(output == input)
    {
        return false;
    }

    input = output;
    return true;
}

inline bool to_lower_case(uint32_t& input)
{
    auto output = find_lower_case(input);
    if(output == input)
    {
        return false;
    }

    input = output;
    return true;
}
}
